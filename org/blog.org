#+TITLE: mzduskの日記
#+URL: http://mzdusk.github.com/
#+STARTUP: logdone
#+DISQUS: mzdusk
#+PUBLISH_DIR: ..
#+AUTHOR: mzdusk

* mzdusk の日記
  :PROPERTIES:
  :PAGE: index.html
  :TEMPLATE: blog_static_no_title.html
  :END:

#+HTML: <h3><small>技術メモ、その他</small></h3>

-----

** 最近の投稿
   - [[file:{lisp}(format%20"%25s/%25s"%20(ob:path-to-root)%20(ob:post-htmlfile%20(ob:get-last-post%20"Blog"%200))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Blog" 0)){/lisp}]]
   - [[file:{lisp}(format%20"%25s/%25s"%20(ob:path-to-root)%20(ob:post-htmlfile%20(ob:get-last-post%20"Blog"%201))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Blog" 1)){/lisp}]]
   - [[file:{lisp}(format%20"%25s/%25s"%20(ob:path-to-root)%20(ob:post-htmlfile%20(ob:get-last-post%20"Blog"%202))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Blog" 2)){/lisp}]]

* Blog Details
** Copyright
   :PROPERTIES:
   :SNIPPET: t
   :END:

   Copyright © 2013 Yusuke MATSUDA

** About
   :PROPERTIES:
   :SNIPPET: t
   :END:

   - 得意なもの :: Ruby on Rails
   - 現在の興味 :: テスト駆動開発

** Navigation
   :PROPERTIES:
   :SNIPPET: t
   :END:

- [[file:#][/icon-file icon-white/ 最近の投稿]]
  - [[file:{lisp}(format%20"%25s/%25s"%20(ob:path-to-root)%20(ob:post-htmlfile%20(ob:get-last-post%20"Blog"%200))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Blog" 0)){/lisp}]]
  - [[file:{lisp}(format%20"%25s/%25s"%20(ob:path-to-root)%20(ob:post-htmlfile%20(ob:get-last-post%20"Blog"%201))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Blog" 1)){/lisp}]]
  - [[file:{lisp}(format%20"%25s/%25s"%20(ob:path-to-root)%20(ob:post-htmlfile%20(ob:get-last-post%20"Blog"%202))){/lisp}][{lisp}(ob:post-title (ob:get-last-post "Blog" 2)){/lisp}]]

- [[file:{lisp}(ob:path-to-root){/lisp}/tags][/icon-tags icon-white/ Tags]]

- [[file:{lisp}(ob:path-to-root){/lisp}/archives.html][/icon-list icon-white/ Archives]]

- [[file:{lisp}(ob:path-to-root){/lisp}/index.xml][/icon-rss icon-white/ RSS]]

** Navigation Footer
   :PROPERTIES:
   :SNIPPET: t
   :END:

   - [[http://www.facebook.com/yusuke.matsuda.58][/icon-facebook/ Facebook]]

   - [[https://twitter.com/mzdusk][/icon-twitter/ Twitter]]

   - [[https://github.com/mzdusk][/icon-github/ GitHub]]

* Debug
  :PROPERTIES:
  :PAGE:     debug.html
  :TEMPLATE: debug.html
  :SITEMAP:  f
  :END:

* Blog
** DONE o-blogでブログを始める					     :o@blog:
   CLOSED: [2013-03-14 Thu 23:27]
   :PROPERTIES:
   :CUSTOM_ID: starting-o-blog
   :END:

   Emacs には [[http://orgmode.org][Org-mode]] というアウトライナー (の域を超えた何か) があります。
   [[http://renard.github.com/o-blog][o-blog]] は org-mode でブログを書くためのツールなんですが、
   公式ページはいまいち説明が足りなくて、何をすればいいのかわかりにくいです。
   とりあえず最初に最低限やっておけばいいことをまとめておきます。

*** ブログ全体の設定

   とりあえず必要なのは、タイトルの設定。それ以外の項目はそれほど重要ではないと思います。
   ブログのタイトルは =TITLE= ヘッダで設定します。

   ブログはデフォルトでは =out= ディレクトリに出力されます。
   変えたい場合は =PUBLISH_DIR= に org ファイルからの相対パスで指定します。

   あと、コメントシステムに Disqus が使えるようになっているので、
   アカウントを持っていれば設定しておけばいいでしょう。

#+BEGIN_SRC org
,#+TITLE: Blog Title
,#+DISQUS: disqus-account
,#+PUBLISH_DIR: blog
#+END_SRC
   
*** トップページの整備

    トップページは次のようにプロパティの =PAGE= と =TEMPLATE= をそれぞれ =index.html= と
    =blog_static_no_title.html= を指定した静的ページを用意します。

#+BEGIN_SRC org
,* Page Title
,  :PROPERTIES:
,  :PAGE: index.html
,  :TEMPLATE: blog_static_no_title.html
,  :END:
,
,トップページの内容
#+END_SRC

    この状態でページを生成してみると、ところどころに =Lisp error= なるものが表示されます。
    テンプレートをいじって消すという方法もありますが、せっかくなので項目を用意してこれを解消します。
    
    ページ上部のタイトル横のエラーは =Navigation= の項目を用意すると解消されます。
    ページ下部の About, Links はそれぞれ =About= と =Navigation Footer= の
    項目を用意すると表示されます。
    また、見えにくいんですが Powered by o-blog の上に著作権表示の部分があります。
    これは =Copyright= の項目を用意すればいいです。

    この部分の設定はこんな感じ。

#+BEGIN_SRC org
,* Blog Details
,** Copyright
,   :PROPERTIES:
,   :SNIPPET: t
,   :END:
,
,   Copyright © 20XX Foo Bar
,
,** About
,   :PROPERTIES:
,   :SNIPPET: t
,   :END:
,
,   This is About
,
,** Navigation
,   :PROPERTIES:
,   :SNIPPET: t
,   :END:
,
,- [[file:#][Blog Posts]]
,  - [[file:post01][Post 01]]
,  - [[file:post02][Post 01]]
,
,** Navigation Footer
,   :PROPERTIES:
,   :SNIPPET: t
,   :END:
,
,   - [[http://google.com][Google]]
#+END_SRC

    なお、 =Navigation= には、リストを 2 階層にすると、2 階層目のリンクがドロップダウンリストで
    表示されるという便利機能があります。

*** エントリの作成

    o-blog では DONE 状態の項目がエントリとして扱われ、その見出しがエントリのタイトルとなります。
    2 階層にしておけば、第 1 階層の見出しがカテゴリとなります。
    カテゴリは =category= プロパティでも設定できます。

    エントリのファイル名はタイトルから生成されますが、
    日本語のタイトルでは日本語の部分が無視されてしまうので、
    別にファイル名を指定したければ、 =CUSTOM_ID= で設定できます。

#+BEGIN_SRC org
,* Blog
,** DONE 日本語タイトルの日記
,   :PROPERTIES:
,   :CUSTOM_ID: japanese-title-entry
,   :END:

,   ほげほげ
#+END_SRC

    最後に

    : M-x org-publish-blog

    でブログ全体が生成されます。



** DONE Librarian 開発構想				     :memo:librarian:
   CLOSED: [2013-03-19 Tue 22:50]
   :PROPERTIES:
   :CUSTOM_ID: concept-librarian
   :END:

   Web アプリケーションのネタを思いついたのでメモ。

*** Librarian
    音楽団体向け Web アプリケーション。

    演奏会や練習日程、楽譜などの管理を行う。
    アプリケーション名は楽団で楽譜の管理を担当する者 (ライブラリアン) から。

**** 主な機能
     - 演奏会情報の管理
       - 日程
       - 曲目
     - 練習日程の管理
     - 楽譜の管理
     - 団員の管理
       - 担当パート


     ログインユーザ (団員) は練習日程の詳細や楽譜のダウンロードが可能。
     ゲストは次の演奏会の情報のみ参照可能。


** DONE 「テスト駆動開発入門」写経 (1)					:tdd:
   CLOSED: [2013-03-20 Wed 17:04]
   :PROPERTIES:
   :CUSTOM_ID: tdd-transcribing-1
   :END:

   「テスト駆動開発入門」を Ruby と RSpec で写経していきます。

   例では、複数の通貨が混在した状況で計算のできる Money オブジェクトを作っていきます。

*** 最初のテスト

    いきなり Money オブジェクトの実装は難しいですので、最初はドルだけを扱うための
    Dollar オブジェクトからはじめます。

    まずはシンプルな乗法のテストから。

    dollar\_spec.rb

#+BEGIN_SRC ruby
require 'dollar'

describe Dollar, "#times" do
  it "should be multiply" do
    five = Dollar.new(5)
    five.times!(2)
    five.amount.should eq(10)
  end
end
#+END_SRC

    早速、rspec を実行します。

#+BEGIN_EXAMPLE
yusuke@localhost ~/src/tdd-transcribing/part1 $ rspec
/home/yusuke/src/tdd-transcribing/part1/spec/dollar_spec.rb:3:in `<top (required)>': uninitialized constant Dollar (NameError)
        from /home/yusuke/.rvm/gems/ruby-2.0.0-p0@tdd/gems/rspec-core-2.13.1/lib/rspec/core/configuration.rb:819:in `load'
        from /home/yusuke/.rvm/gems/ruby-2.0.0-p0@tdd/gems/rspec-core-2.13.1/lib/rspec/core/configuration.rb:819:in `block in load_spec_files'
        from /home/yusuke/.rvm/gems/ruby-2.0.0-p0@tdd/gems/rspec-core-2.13.1/lib/rspec/core/configuration.rb:819:in `each'
        from /home/yusuke/.rvm/gems/ruby-2.0.0-p0@tdd/gems/rspec-core-2.13.1/lib/rspec/core/configuration.rb:819:in `load_spec_files'
        from /home/yusuke/.rvm/gems/ruby-2.0.0-p0@tdd/gems/rspec-core-2.13.1/lib/rspec/core/command_line.rb:22:in `run'
        from /home/yusuke/.rvm/gems/ruby-2.0.0-p0@tdd/gems/rspec-core-2.13.1/lib/rspec/core/runner.rb:80:in `run'
        from /home/yusuke/.rvm/gems/ruby-2.0.0-p0@tdd/gems/rspec-core-2.13.1/lib/rspec/core/runner.rb:17:in `block in autorun'
#+END_EXAMPLE

*** dollar.rb の作成

    当然、Dollar クラスがないということで失敗しましたので、dollar.rb を作成します。

    dollar.rb

#+BEGIN_SRC ruby
class Dollar
end
#+END_SRC

    実行します。

#+BEGIN_EXAMPLE
yusuke@localhost ~/src/tdd-transcribing/part1 $ rspec
F

Failures:

  1) Dollar#times should be multiply
     Failure/Error: five = Dollar.new(5)
     ArgumentError:
       wrong number of arguments (1 for 0)
     # ./spec/dollar_spec.rb:5:in `initialize'
     # ./spec/dollar_spec.rb:5:in `new'
     # ./spec/dollar_spec.rb:5:in `block (2 levels) in <top (required)>'

Finished in 0.00049 seconds
1 example, 1 failure

Failed examples:

rspec ./spec/dollar_spec.rb:4 # Dollar#times should be multiply
#+END_EXAMPLE

    テストは失敗します。
    コンストラクタの引数の数が違うと言われましたので、コンストラクタを作成します。

    dollar.rb

#+BEGIN_SRC ruby
class Dollar
  def initialize(amount)
  end
end
#+END_SRC

    テストを実行します。

#+BEGIN_EXAMPLE
yusuke@localhost ~/src/tdd-transcribing/part1 $ rspec
F

Failures:

  1) Dollar#times should be multiply
     Failure/Error: five.times!(2)
     NoMethodError:
       undefined method `times!' for #<Dollar:0x000000011e7cc8>
     # ./spec/dollar_spec.rb:6:in `block (2 levels) in <top (required)>'

Finished in 0.00048 seconds
1 example, 1 failure

Failed examples:

rspec ./spec/dollar_spec.rb:4 # Dollar#times should be multiply
#+END_EXAMPLE

    次は times! メソッドがないと言ってきました。
    とりあえず空の times! メソッドを実装しておきます

    dollar.rb

#+BEGIN_SRC ruby
class Dollar
  def initialize(amount)
  end

  def times!(multiplier)
  end
end
#+END_SRC

    テストを実行します。

#+BEGIN_EXAMPLE
yusuke@localhost ~/src/tdd-transcribing/part1 $ rspec
F

Failures:

  1) Dollar#times should be multiply
     Failure/Error: five.amount.should eq(10)
     NoMethodError:
       undefined method `amount' for #<Dollar:0x0000000118d750>
     # ./spec/dollar_spec.rb:7:in `block (2 levels) in <top (required)>'

Finished in 0.00049 seconds
1 example, 1 failure

Failed examples:

rspec ./spec/dollar_spec.rb:4 # Dollar#times should be multiply
#+END_EXAMPLE

    今度は amount メソッドが無いと言います。作りましょう。

    dollar.rb

#+BEGIN_SRC ruby
class Dollar
  def initialize(amount)
  end

  def times!(multiplier)
  end

  def amount
  end
end
#+END_SRC

    テストを実行します。

#+BEGIN_EXAMPLE
yusuke@localhost ~/src/tdd-transcribing/part1 $ rspec
F

Failures:

  1) Dollar#times should be multiply
     Failure/Error: five.amount.should eq(10)
       
       expected: 10
            got: nil
       
       (compared using ==)
     # ./spec/dollar_spec.rb:7:in `block (2 levels) in <top (required)>'

Finished in 0.00067 seconds
1 example, 1 failure

Failed examples:

rspec ./spec/dollar_spec.rb:4 # Dollar#times should be multiply
#+END_EXAMPLE

    テストは失敗します。今度は 10 が返ってきてほしいところで nil が返ってきています。

    テストを成功させるために必要なことは何か？
    amount の返り値を設定します。

    dollar.rb

#+BEGIN_SRC ruby
  def amount
    10
  end
#+END_SRC

    今の目標はとりあえずテストを通すことなので、こうしておきます。
    正しい実装は後で考えます。

    テストを実行しましょう。

#+BEGIN_EXAMPLE
yusuke@localhost ~/src/tdd-transcribing/part1 $ rspec
.

Finished in 0.00375 seconds
1 example, 0 failures
#+END_EXAMPLE

    やっと成功しました。

    しかし、実装がこのままでいいわけがないので、一般化を行う必要があります。

    TDD は次のようなサイクルになります。

    1. テストを作成する
    2. テストを実行し、失敗を確認する
    3. 最小限の修正を行う
    4. テストを実行し、成功を確認する
    5. 重複を取り除くためにリファクタリングをする


*** コードのリファクタリング
       
    ここで 4 までを実行しました。次は重複を取り除きます。

    非常にわかりにくいですが、amount の返り値の 10 が 5 * 2 であると考えれば、
    amount の返り値とテストコード中の値が重複していることになります。

    まずはインスタンス変数を利用し、 amount の 10 を 5 * 2 にして times! に移しましょう。

    dollar.rb

#+BEGIN_SRC ruby
  def times!(multiplier)
    @amount = 5 * 2
  end

  def amount
    @amount
  end
#+END_SRC

    このように修正してもテストに成功します (実行結果は省略)。

    ここで、2 という数字は times! の引数として与えられたものなので、これを置き換えます。

    dollar.rb

#+BEGIN_SRC ruby
  def times!(multiplier)
    @amount = 5 * multiplier
  end
#+END_SRC

    修正があるたびにテストを実行して確認します。これも成功します。

    5 という数字はコンストラクタから渡されたものです。
    これも amount インスタンス変数を使って、コンストラクタに移します。

    dollar.rb

#+BEGIN_SRC ruby
  def initialize(amount)
    @amount = amount
  end

  def times!(multiplier)
    @amount = @amount * multiplier
  end
#+END_SRC

    また、ruby には *= 演算子があるので、これを利用します。

    dollar.rb

#+BEGIN_SRC ruby
  def times!(multiplier)
    @amount *= multiplier
  end
#+END_SRC
    
    さらに、アクセサメソッドを定義するための仕組みもあるので、
    これを利用して amount メソッドを削除します。
    最終的な Dollar クラスは次のようになります。

#+BEGIN_SRC ruby
class Dollar
  attr_reader :amount

  def initialize(amount)
    @amount = amount
  end

  def times!(multiplier)
    @amount *= multiplier
  end
end
#+END_SRC

    ここまでが第 1 章の内容です。

